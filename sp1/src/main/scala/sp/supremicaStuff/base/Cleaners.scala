package sp.supremicaStuff.base

import net.sourceforge.waters.xsd.base.EventKind
import scala.collection.JavaConverters._

trait Cleaners extends BaseFunctionality {
  val enabledLabels: Set[String]
  def majorClean :Unit = {
    val controllableAlphabet = getAlphabet.filter(_.getKind() == EventKind.CONTROLLABLE).map(_.getName())
    //remove transitions and events
    val eventsToRemove = getFlowers.flatMap { f =>
      val transitionsToRemove = f.getGraph().getEdgesModifiable().asScala.filter { edge =>
        edge.getLabelBlock().getEventIdentifierListModifiable().asScala.map(_.toString).filter(
          e => (controllableAlphabet.contains(e) & enabledLabels.contains(e)) | (!controllableAlphabet.contains(e) & !e.startsWith(NamingInAutogeneratedFlowers.FORBIDDEN_EVENT_NAME))).isEmpty
      }
      f.getGraph().getEdgesModifiable().removeAll(transitionsToRemove.asJava) //transitions labeled by events to be removed are removed
      transitionsToRemove.flatMap(e => e.getLabelBlock().getEventIdentifierListModifiable().asScala.map(_.toString))
    }
    eventsToRemove.foreach { etr =>
      val eventObjectsToRemove = getAlphabet.map(e => e.getName() -> e).toMap.filterKeys(etr.contains).values
      mModule.getEventDeclListModifiable().removeAll(eventObjectsToRemove.toSet.asJava)
    }
    //remove forbidden state variables and empty flowers
    val forbiddenStateVariables = getVariables.filter(_.getName().startsWith(NamingInAutogeneratedFlowers.FORBIDDEN_VARIABLE_NAME))
    mModule.getComponentListModifiable().removeAll(forbiddenStateVariables.asJava)
    val emptyFlowers = getFlowers.filter(_.getGraph().getEdgesModifiable().isEmpty())
    mModule.getComponentListModifiable().removeAll(emptyFlowers.asJava)
  }
}